{"ast":null,"code":"var _jsxFileName = \"/home/tomas/Documents/CodingProjects/snake/react-snake-START-HERE/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect } from \"react\";\nimport { useInterval } from \"./useInterval\";\nimport { CANVAS_SIZE, SNAKE_START, APPLE_START, SCALE, SPEED, DIRECTIONS } from \"./constants\";\n\nconst App = () => {\n  _s();\n\n  const canvasRef = useRef(null);\n  const [snake, setSnake] = useState(SNAKE_START);\n  const [apple, setApple] = useState(APPLE_START);\n  const [dir, setDir] = useState([0, -1]);\n  const [speed, setSpeed] = useState(300);\n  const [gameOver, setGameOver] = useState(false);\n\n  const startGame = () => {\n    setSnake(SNAKE_START);\n    setApple(APPLE_START);\n    setDir([0, -1]);\n    setSpeed(SPEED);\n    setGameOver(false);\n  };\n\n  const endGame = () => {\n    setSpeed(null);\n    setGameOver(true);\n  };\n\n  const moveSnake = ({\n    keyCode\n  }) => keyCode >= 37 && keyCode <= 40 && setDir(DIRECTIONS[keyCode]);\n\n  const checkCollision = (piece, snk = snake) => {\n    if (piece[0] * SCALE >= CANVAS_SIZE[0] || piece[0] < 0 || piece[1] * SCALE >= CANVAS_SIZE[1] || piece[1] < 0) {\n      return true;\n\n      for (const segment of snk) {\n        if (piece[0] === segment[0] && piece[1] === segment[1]) {\n          return true;\n        }\n      }\n    } else {\n      return false;\n    }\n  };\n\n  const checkAppleCollision = newSnake => {\n    if (newSnake[0][0] === apple[0] && newSnake[0][1] === apple[1]) {\n      let newAple = createAple();\n    }\n  };\n\n  const gameLoop = () => {\n    const snakeCopy = JSON.parse(JSON.stringify(snake));\n    const newSnakeHead = [snakeCopy[0][0] + dir[0], snakeCopy[0][1] + dir[1]];\n    snakeCopy.unshift(newSnakeHead);\n    if (checkCollision(newSnakeHead)) endGame();\n    snakeCopy.pop();\n    setSnake(snakeCopy);\n  };\n\n  useEffect(() => {\n    const context = canvasRef.current.getContext(\"2d\");\n    context.setTransform(SCALE, 0, 0, SCALE, 0, 0);\n    context.clearRect(0, 0, CANVAS_SIZE[0], CANVAS_SIZE[1]);\n    context.fillStyle = \"pink\";\n    snake.forEach(([x, y]) => context.fillRect(x, y, 1, 1));\n    context.fillStyle = \"lightblue\";\n    context.fillRect(apple[0], apple[1], 1, 1);\n  }, [snake, apple, gameOver]);\n  useInterval(() => gameLoop(), speed);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    role: \"button\",\n    tabIndex: \"0\",\n    onKeyDown: e => moveSnake(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"canvas\", {\n    style: {\n      border: \"1px solid black\"\n    },\n    ref: canvasRef,\n    width: `${CANVAS_SIZE[0]}px`,\n    height: `${CANVAS_SIZE[1]}px`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 4\n    }\n  }), gameOver && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 17\n    }\n  }, \"Game Over \"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: startGame,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 4\n    }\n  }, \"Start new Game\"));\n};\n\n_s(App, \"rccYIeaK/G2HaGXQCuA3YbXJKtY=\", false, function () {\n  return [useInterval];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/tomas/Documents/CodingProjects/snake/react-snake-START-HERE/src/App.js"],"names":["React","useState","useRef","useEffect","useInterval","CANVAS_SIZE","SNAKE_START","APPLE_START","SCALE","SPEED","DIRECTIONS","App","canvasRef","snake","setSnake","apple","setApple","dir","setDir","speed","setSpeed","gameOver","setGameOver","startGame","endGame","moveSnake","keyCode","checkCollision","piece","snk","segment","checkAppleCollision","newSnake","newAple","createAple","gameLoop","snakeCopy","JSON","parse","stringify","newSnakeHead","unshift","pop","context","current","getContext","setTransform","clearRect","fillStyle","forEach","x","y","fillRect","e","border"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\"\nimport { useInterval } from \"./useInterval\"\nimport {\n\tCANVAS_SIZE,\n\tSNAKE_START,\n\tAPPLE_START,\n\tSCALE,\n\tSPEED,\n\tDIRECTIONS,\n} from \"./constants\"\n\nconst App = () => {\n\tconst canvasRef = useRef(null)\n\tconst [snake, setSnake] = useState(SNAKE_START)\n\tconst [apple, setApple] = useState(APPLE_START)\n\tconst [dir, setDir] = useState([0, -1])\n\tconst [speed, setSpeed] = useState(300)\n\tconst [gameOver, setGameOver] = useState(false)\n\n\tconst startGame = () => {\n\t\tsetSnake(SNAKE_START)\n\t\tsetApple(APPLE_START)\n\t\tsetDir([0, -1])\n\t\tsetSpeed(SPEED)\n\t\tsetGameOver(false)\n\t}\n\tconst endGame = () => {\n\t\tsetSpeed(null)\n\t\tsetGameOver(true)\n\t}\n\n\tconst moveSnake = ({ keyCode }) =>\n\t\tkeyCode >= 37 &&\n\t\tkeyCode <= 40 &&\n\t\tsetDir(DIRECTIONS[keyCode])\n\n\tconst checkCollision = (piece, snk = snake) => {\n\t\tif (\n\t\t\tpiece[0] * SCALE >= CANVAS_SIZE[0] ||\n\t\t\tpiece[0] < 0 ||\n\t\t\tpiece[1] * SCALE >= CANVAS_SIZE[1] ||\n\t\t\tpiece[1] < 0\n\t\t) {\n\t\t\treturn true\n\t\t\tfor (const segment of snk) {\n\t\t\t\tif (\n\t\t\t\t\tpiece[0] === segment[0] &&\n\t\t\t\t\tpiece[1] === segment[1]\n\t\t\t\t) {\n\t\t\t\t\treturn true\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\treturn false\n\t\t}\n\t}\n\tconst checkAppleCollision = (newSnake) => {\n\t\tif (\n\t\t\tnewSnake[0][0] === apple[0] &&\n\t\t\tnewSnake[0][1] === apple[1]\n\t\t) {\n\t\t\tlet newAple = createAple()\n\t\t}\n\t}\n\tconst gameLoop = () => {\n\t\tconst snakeCopy = JSON.parse(JSON.stringify(snake))\n\t\tconst newSnakeHead = [\n\t\t\tsnakeCopy[0][0] + dir[0],\n\t\t\tsnakeCopy[0][1] + dir[1],\n\t\t]\n\t\tsnakeCopy.unshift(newSnakeHead)\n\t\tif (checkCollision(newSnakeHead)) endGame()\n\t\tsnakeCopy.pop()\n\t\tsetSnake(snakeCopy)\n\t}\n\tuseEffect(() => {\n\t\tconst context = canvasRef.current.getContext(\"2d\")\n\t\tcontext.setTransform(SCALE, 0, 0, SCALE, 0, 0)\n\t\tcontext.clearRect(0, 0, CANVAS_SIZE[0], CANVAS_SIZE[1])\n\t\tcontext.fillStyle = \"pink\"\n\t\tsnake.forEach(([x, y]) => context.fillRect(x, y, 1, 1))\n\t\tcontext.fillStyle = \"lightblue\"\n\t\tcontext.fillRect(apple[0], apple[1], 1, 1)\n\t}, [snake, apple, gameOver])\n\n\tuseInterval(() => gameLoop(), speed)\n\treturn (\n\t\t<div\n\t\t\trole=\"button\"\n\t\t\ttabIndex=\"0\"\n\t\t\tonKeyDown={(e) => moveSnake(e)}\n\t\t>\n\t\t\t<canvas\n\t\t\t\tstyle={{ border: \"1px solid black\" }}\n\t\t\t\tref={canvasRef}\n\t\t\t\twidth={`${CANVAS_SIZE[0]}px`}\n\t\t\t\theight={`${CANVAS_SIZE[1]}px`}\n\t\t\t/>\n\t\t\t{gameOver && <div>Game Over </div>}\n\t\t\t<button onClick={startGame}>Start new Game</button>\n\t\t</div>\n\t)\n}\nexport default App\n"]},"metadata":{},"sourceType":"module"}