{"ast":null,"code":"var _jsxFileName = \"/home/tomas/Documents/CodingProjects/snake/react-snake-START-HERE/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect } from \"react\";\nimport { useInterval } from \"./useInterval\";\nimport { CANVAS_SIZE, SNAKE_START, APPLE_START, SCALE, SPEED, DIRECTIONS } from \"./constants\";\n\nconst App = () => {\n  _s();\n\n  const canvasRef = useRef(null);\n  const [snake, setSnake] = useState(SNAKE_START);\n  const [apple, setApple] = useState(APPLE_START);\n  const [dir, setDir] = useState([0, -1]);\n  const [speed, setSpeed] = useState(null);\n  const [gameOver, setGameOver] = useState(false);\n\n  const startGame = () => {};\n\n  const endGame = () => {};\n\n  const moveSnake = ({\n    keyCode\n  }) => keyCode >= 37 && keyCode <= 40 && setDir(DIRECTIONS[keyCode]);\n\n  const checkCollision = () => {};\n\n  const checkAppleCollision = () => {};\n\n  const gameLoop = () => {\n    const snakeCopy = JSON.parse(JSON.stringify(snake));\n    const newSnakeHead = [snakeCopy[0][0] + dir[0], snakeCopy[0][1] + dir[1]];\n    snakeCopy.unshift(newSnakeHead);\n    snakeCopy.pop();\n    setSnake(snakeCopy);\n  };\n\n  useEffect(() => {\n    const context = canvasRef.current.getContext(\"2d\");\n    context.setTransform(SCALE, 0, 0, SCALE, 0, 0);\n    context.clearRect(0, 0, CANVAS_SIZE[0], CANVAS_SIZE[1]);\n    context.fillStyle = \"pink\";\n    snake.forEach(([x, y]) => context.fillRect(x, y, 1, 1));\n    context.fillStyle = \"lightblue\";\n    context.fillRect(apple[0], apple[1], 1, 1);\n  }, [snake, apple, gameOver]);\n  useInterval(gameLoop(), speed);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    role: \"button\",\n    tabIndex: \"0\",\n    onKeyDown: e => moveSnake(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"canvas\", {\n    style: {\n      border: \"1px solid black\"\n    },\n    ref: canvasRef,\n    width: `${CANVAS_SIZE[0]}px`,\n    height: `${CANVAS_SIZE[1]}px`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 4\n    }\n  }), gameOver && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 17\n    }\n  }, \"Game Over \"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: startGame,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 4\n    }\n  }, \"Start new Game\"));\n};\n\n_s(App, \"i/XcNvXKCmE9SbiVgAT6H/EgUzU=\", false, function () {\n  return [useInterval];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/tomas/Documents/CodingProjects/snake/react-snake-START-HERE/src/App.js"],"names":["React","useState","useRef","useEffect","useInterval","CANVAS_SIZE","SNAKE_START","APPLE_START","SCALE","SPEED","DIRECTIONS","App","canvasRef","snake","setSnake","apple","setApple","dir","setDir","speed","setSpeed","gameOver","setGameOver","startGame","endGame","moveSnake","keyCode","checkCollision","checkAppleCollision","gameLoop","snakeCopy","JSON","parse","stringify","newSnakeHead","unshift","pop","context","current","getContext","setTransform","clearRect","fillStyle","forEach","x","y","fillRect","e","border"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\"\nimport { useInterval } from \"./useInterval\"\nimport {\n\tCANVAS_SIZE,\n\tSNAKE_START,\n\tAPPLE_START,\n\tSCALE,\n\tSPEED,\n\tDIRECTIONS,\n} from \"./constants\"\n\nconst App = () => {\n\tconst canvasRef = useRef(null)\n\tconst [snake, setSnake] = useState(SNAKE_START)\n\tconst [apple, setApple] = useState(APPLE_START)\n\tconst [dir, setDir] = useState([0, -1])\n\tconst [speed, setSpeed] = useState(null)\n\tconst [gameOver, setGameOver] = useState(false)\n\n\tconst startGame = () => {}\n\tconst endGame = () => {}\n\tconst moveSnake = ({ keyCode }) =>\n\t\tkeyCode >= 37 &&\n\t\tkeyCode <= 40 &&\n\t\tsetDir(DIRECTIONS[keyCode])\n\tconst checkCollision = () => {}\n\tconst checkAppleCollision = () => {}\n\tconst gameLoop = () => {\n\t\tconst snakeCopy = JSON.parse(JSON.stringify(snake))\n\t\tconst newSnakeHead = [\n\t\t\tsnakeCopy[0][0] + dir[0],\n\t\t\tsnakeCopy[0][1] + dir[1],\n\t\t]\n\t\tsnakeCopy.unshift(newSnakeHead)\n\t\tsnakeCopy.pop()\n\t\tsetSnake(snakeCopy)\n\t}\n\tuseEffect(() => {\n\t\tconst context = canvasRef.current.getContext(\"2d\")\n\t\tcontext.setTransform(SCALE, 0, 0, SCALE, 0, 0)\n\t\tcontext.clearRect(0, 0, CANVAS_SIZE[0], CANVAS_SIZE[1])\n\t\tcontext.fillStyle = \"pink\"\n\t\tsnake.forEach(([x, y]) => context.fillRect(x, y, 1, 1))\n\t\tcontext.fillStyle = \"lightblue\"\n\t\tcontext.fillRect(apple[0], apple[1], 1, 1)\n\t}, [snake, apple, gameOver])\n\n\tuseInterval(gameLoop(), speed)\n\treturn (\n\t\t<div\n\t\t\trole=\"button\"\n\t\t\ttabIndex=\"0\"\n\t\t\tonKeyDown={(e) => moveSnake(e)}\n\t\t>\n\t\t\t<canvas\n\t\t\t\tstyle={{ border: \"1px solid black\" }}\n\t\t\t\tref={canvasRef}\n\t\t\t\twidth={`${CANVAS_SIZE[0]}px`}\n\t\t\t\theight={`${CANVAS_SIZE[1]}px`}\n\t\t\t/>\n\t\t\t{gameOver && <div>Game Over </div>}\n\t\t\t<button onClick={startGame}>Start new Game</button>\n\t\t</div>\n\t)\n}\nexport default App\n"]},"metadata":{},"sourceType":"module"}