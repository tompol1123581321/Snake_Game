{"ast":null,"code":"var _jsxFileName = \"/home/tomas/Documents/CodingProjects/snake/react-snake-START-HERE/src/components/mainSreen.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useRef } from \"react\";\nimport { useInterval } from \"../useInterval\";\nimport { CANVAS_SIZE, SNAKE_START, APPLE_START, SCALE, SPEED, DIRECTIONS } from \"../constants\";\nimport BestScore from \"./bestScore\";\n\nconst MainSreen = () => {\n  _s();\n\n  const canvasRef = useRef();\n  const [snake, setSnake] = useState(SNAKE_START);\n  const [apple, setApple] = useState(APPLE_START);\n  const [dir, setDir] = useState([0, -1]);\n  const [speed, setSpeed] = useState(null);\n  const [gameOver, setGameOver] = useState(true);\n  useInterval(() => gameLoop(), speed);\n\n  const endGame = () => {\n    setSpeed(null);\n    setGameOver(true);\n    setClick(\"Click the playing field to Start\");\n  };\n\n  const moveSnake = ({\n    keyCode\n  }) => keyCode >= 37 && keyCode <= 40 && setDir(DIRECTIONS[keyCode]);\n\n  const createApple = () => apple.map((_a, i) => Math.floor(Math.random() * (CANVAS_SIZE[i] / SCALE)));\n\n  const checkCollision = (piece, snk = snake) => {\n    if (piece[0] * SCALE >= CANVAS_SIZE[0] || piece[0] < 0 || piece[1] * SCALE >= CANVAS_SIZE[1] || piece[1] < 0) return true;\n\n    for (const segment of snk) {\n      if (piece[0] === segment[0] && piece[1] === segment[1]) return true;\n    }\n\n    return false;\n  };\n\n  const checkAppleCollision = newSnake => {\n    if (newSnake[0][0] === apple[0] && newSnake[0][1] === apple[1]) {\n      setScore(score + 1);\n      let newApple = createApple();\n\n      while (checkCollision(newApple, newSnake)) {\n        newApple = createApple();\n      }\n\n      setApple(newApple);\n      return true;\n    }\n\n    return false;\n  };\n\n  const gameLoop = () => {\n    const snakeCopy = JSON.parse(JSON.stringify(snake));\n    const newSnakeHead = [snakeCopy[0][0] + dir[0], snakeCopy[0][1] + dir[1]];\n    snakeCopy.unshift(newSnakeHead);\n    if (checkCollision(newSnakeHead)) endGame();\n    if (!checkAppleCollision(snakeCopy)) snakeCopy.pop();\n    setSnake(snakeCopy);\n  };\n\n  const startGame = () => {\n    setSnake(SNAKE_START);\n    setApple(APPLE_START);\n    setDir([0, -1]);\n    setSpeed(SPEED);\n    setGameOver(false);\n  };\n\n  useEffect(() => {\n    const context = canvasRef.current.getContext(\"2d\");\n    context.setTransform(SCALE, 0, 0, SCALE, 0, 0);\n    context.clearRect(0, 0, window.innerWidth, window.innerHeight);\n    context.fillStyle = \"gray\";\n    snake.forEach(([x, y]) => context.fillRect(x, y, 1, 1));\n    context.fillStyle = \"red\";\n    context.fillRect(apple[0], apple[1], 1, 1);\n  }, [snake, apple, gameOver]);\n  const [click, setClick] = useState(\"Click the playing field to Start\");\n  const [score, setScore] = useState(0);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mainScreen\",\n    style: {\n      display: \"flex\",\n      justifyContent: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    role: \"button\",\n    tabIndex: \"1\",\n    onKeyDown: e => moveSnake(e),\n    style: {\n      display: \"flex\",\n      flexDirection: \"row\",\n      justifyContent: \"space-around\",\n      maxWidth: \"70rem\",\n      margin: \"auto\"\n    },\n    onClick: () => {\n      setScore(0);\n      startGame();\n      setClick(\"Game is running\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(BestScore, {\n    score: score,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 6\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 6\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }\n  }, click))), /*#__PURE__*/React.createElement(\"canvas\", {\n    style: {\n      border: \"2px solid gray\",\n      backgroundColor: \"white\",\n      margin: \"auto\"\n    },\n    ref: canvasRef,\n    width: `${CANVAS_SIZE[0]}px`,\n    height: `${CANVAS_SIZE[1]}px`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 5\n    }\n  })));\n};\n\n_s(MainSreen, \"Py0y1BRqUEPu/V0Z5K9GyVHXv9g=\", false, function () {\n  return [useInterval];\n});\n\n_c = MainSreen;\nexport default MainSreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"MainSreen\");","map":{"version":3,"sources":["/home/tomas/Documents/CodingProjects/snake/react-snake-START-HERE/src/components/mainSreen.js"],"names":["React","useEffect","useState","useRef","useInterval","CANVAS_SIZE","SNAKE_START","APPLE_START","SCALE","SPEED","DIRECTIONS","BestScore","MainSreen","canvasRef","snake","setSnake","apple","setApple","dir","setDir","speed","setSpeed","gameOver","setGameOver","gameLoop","endGame","setClick","moveSnake","keyCode","createApple","map","_a","i","Math","floor","random","checkCollision","piece","snk","segment","checkAppleCollision","newSnake","setScore","score","newApple","snakeCopy","JSON","parse","stringify","newSnakeHead","unshift","pop","startGame","context","current","getContext","setTransform","clearRect","window","innerWidth","innerHeight","fillStyle","forEach","x","y","fillRect","click","display","justifyContent","e","flexDirection","maxWidth","margin","border","backgroundColor"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\"\nimport { useInterval } from \"../useInterval\"\nimport {\n\tCANVAS_SIZE,\n\tSNAKE_START,\n\tAPPLE_START,\n\tSCALE,\n\tSPEED,\n\tDIRECTIONS,\n} from \"../constants\"\n\nimport BestScore from \"./bestScore\"\n\nconst MainSreen = () => {\n\tconst canvasRef = useRef()\n\tconst [snake, setSnake] = useState(SNAKE_START)\n\tconst [apple, setApple] = useState(APPLE_START)\n\tconst [dir, setDir] = useState([0, -1])\n\tconst [speed, setSpeed] = useState(null)\n\tconst [gameOver, setGameOver] = useState(true)\n\n\tuseInterval(() => gameLoop(), speed)\n\n\tconst endGame = () => {\n\t\tsetSpeed(null)\n\t\tsetGameOver(true)\n\t\tsetClick(\"Click the playing field to Start\")\n\t}\n\n\tconst moveSnake = ({ keyCode }) =>\n\t\tkeyCode >= 37 &&\n\t\tkeyCode <= 40 &&\n\t\tsetDir(DIRECTIONS[keyCode])\n\n\tconst createApple = () =>\n\t\tapple.map((_a, i) =>\n\t\t\tMath.floor(Math.random() * (CANVAS_SIZE[i] / SCALE))\n\t\t)\n\n\tconst checkCollision = (piece, snk = snake) => {\n\t\tif (\n\t\t\tpiece[0] * SCALE >= CANVAS_SIZE[0] ||\n\t\t\tpiece[0] < 0 ||\n\t\t\tpiece[1] * SCALE >= CANVAS_SIZE[1] ||\n\t\t\tpiece[1] < 0\n\t\t)\n\t\t\treturn true\n\n\t\tfor (const segment of snk) {\n\t\t\tif (\n\t\t\t\tpiece[0] === segment[0] &&\n\t\t\t\tpiece[1] === segment[1]\n\t\t\t)\n\t\t\t\treturn true\n\t\t}\n\t\treturn false\n\t}\n\n\tconst checkAppleCollision = (newSnake) => {\n\t\tif (\n\t\t\tnewSnake[0][0] === apple[0] &&\n\t\t\tnewSnake[0][1] === apple[1]\n\t\t) {\n\t\t\tsetScore(score + 1)\n\t\t\tlet newApple = createApple()\n\t\t\twhile (checkCollision(newApple, newSnake)) {\n\t\t\t\tnewApple = createApple()\n\t\t\t}\n\t\t\tsetApple(newApple)\n\t\t\treturn true\n\t\t}\n\t\treturn false\n\t}\n\n\tconst gameLoop = () => {\n\t\tconst snakeCopy = JSON.parse(JSON.stringify(snake))\n\t\tconst newSnakeHead = [\n\t\t\tsnakeCopy[0][0] + dir[0],\n\t\t\tsnakeCopy[0][1] + dir[1],\n\t\t]\n\t\tsnakeCopy.unshift(newSnakeHead)\n\t\tif (checkCollision(newSnakeHead)) endGame()\n\t\tif (!checkAppleCollision(snakeCopy)) snakeCopy.pop()\n\t\tsetSnake(snakeCopy)\n\t}\n\n\tconst startGame = () => {\n\t\tsetSnake(SNAKE_START)\n\t\tsetApple(APPLE_START)\n\t\tsetDir([0, -1])\n\t\tsetSpeed(SPEED)\n\t\tsetGameOver(false)\n\t}\n\n\tuseEffect(() => {\n\t\tconst context = canvasRef.current.getContext(\"2d\")\n\t\tcontext.setTransform(SCALE, 0, 0, SCALE, 0, 0)\n\t\tcontext.clearRect(\n\t\t\t0,\n\t\t\t0,\n\t\t\twindow.innerWidth,\n\t\t\twindow.innerHeight\n\t\t)\n\t\tcontext.fillStyle = \"gray\"\n\t\tsnake.forEach(([x, y]) => context.fillRect(x, y, 1, 1))\n\t\tcontext.fillStyle = \"red\"\n\t\tcontext.fillRect(apple[0], apple[1], 1, 1)\n\t}, [snake, apple, gameOver])\n\n\tconst [click, setClick] = useState(\n\t\t\"Click the playing field to Start\"\n\t)\n\n\tconst [score, setScore] = useState(0)\n\treturn (\n\t\t<div\n\t\t\tclassName=\"mainScreen\"\n\t\t\tstyle={{\n\t\t\t\tdisplay: \"flex\",\n\t\t\t\tjustifyContent: \"center\",\n\t\t\t}}\n\t\t>\n\t\t\t<div\n\t\t\t\trole=\"button\"\n\t\t\t\ttabIndex=\"1\"\n\t\t\t\tonKeyDown={(e) => moveSnake(e)}\n\t\t\t\tstyle={{\n\t\t\t\t\tdisplay: \"flex\",\n\t\t\t\t\tflexDirection: \"row\",\n\t\t\t\t\tjustifyContent: \"space-around\",\n\t\t\t\t\tmaxWidth: \"70rem\",\n\t\t\t\t\tmargin: \"auto\",\n\t\t\t\t}}\n\t\t\t\tonClick={() => {\n\t\t\t\t\tsetScore(0)\n\t\t\t\t\tstartGame()\n\t\t\t\t\tsetClick(\"Game is running\")\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<div>\n\t\t\t\t\t<BestScore score={score} />\n\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<h4>{click}</h4>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<canvas\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tborder: \"2px solid gray\",\n\t\t\t\t\t\tbackgroundColor: \"white\",\n\t\t\t\t\t\tmargin: \"auto\",\n\t\t\t\t\t}}\n\t\t\t\t\tref={canvasRef}\n\t\t\t\t\twidth={`${CANVAS_SIZE[0]}px`}\n\t\t\t\t\theight={`${CANVAS_SIZE[1]}px`}\n\t\t\t\t></canvas>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default MainSreen\n"]},"metadata":{},"sourceType":"module"}